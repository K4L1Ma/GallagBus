// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package eventbus

import (
	"sync"
)

var (
	lockEventSubscriberResolverMockResolve sync.RWMutex
)

// Ensure, that EventSubscriberResolverMock does implement EventSubscriberResolver.
// If this is not the case, regenerate this file with moq.
var _ EventSubscriberResolver = &EventSubscriberResolverMock{}

// EventSubscriberResolverMock is a mock implementation of EventSubscriberResolver.
//
//     func TestSomethingThatUsesEventSubscriberResolver(t *testing.T) {
//
//         // make and configure a mocked EventSubscriberResolver
//         mockedEventSubscriberResolver := &EventSubscriberResolverMock{
//             ResolveFunc: func(event Event) ([]EventSubscriber, error) {
// 	               panic("mock out the Resolve method")
//             },
//         }
//
//         // use mockedEventSubscriberResolver in code that requires EventSubscriberResolver
//         // and then make assertions.
//
//     }
type EventSubscriberResolverMock struct {
	// ResolveFunc mocks the Resolve method.
	ResolveFunc func(event Event) ([]EventSubscriber, error)

	// calls tracks calls to the methods.
	calls struct {
		// Resolve holds details about calls to the Resolve method.
		Resolve []struct {
			// Event is the event argument value.
			Event Event
		}
	}
}

// Resolve calls ResolveFunc.
func (mock *EventSubscriberResolverMock) Resolve(event Event) ([]EventSubscriber, error) {
	if mock.ResolveFunc == nil {
		panic("EventSubscriberResolverMock.ResolveFunc: method is nil but EventSubscriberResolver.Resolve was just called")
	}
	callInfo := struct {
		Event Event
	}{
		Event: event,
	}
	lockEventSubscriberResolverMockResolve.Lock()
	mock.calls.Resolve = append(mock.calls.Resolve, callInfo)
	lockEventSubscriberResolverMockResolve.Unlock()
	return mock.ResolveFunc(event)
}

// ResolveCalls gets all the calls that were made to Resolve.
// Check the length with:
//     len(mockedEventSubscriberResolver.ResolveCalls())
func (mock *EventSubscriberResolverMock) ResolveCalls() []struct {
	Event Event
} {
	var calls []struct {
		Event Event
	}
	lockEventSubscriberResolverMockResolve.RLock()
	calls = mock.calls.Resolve
	lockEventSubscriberResolverMockResolve.RUnlock()
	return calls
}
