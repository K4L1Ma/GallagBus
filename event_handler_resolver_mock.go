// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package eventbus

import (
	"sync"
)

var (
	lockEventHandlerResolverMockResolve sync.RWMutex
)

// Ensure, that EventHandlerResolverMock does implement EventHandlerResolver.
// If this is not the case, regenerate this file with moq.
var _ EventHandlerResolver = &EventHandlerResolverMock{}

// EventHandlerResolverMock is a mock implementation of EventHandlerResolver.
//
//     func TestSomethingThatUsesEventHandlerResolver(t *testing.T) {
//
//         // make and configure a mocked EventHandlerResolver
//         mockedEventHandlerResolver := &EventHandlerResolverMock{
//             ResolveFunc: func(event Event) ([]EventHandler, error) {
// 	               panic("mock out the Resolve method")
//             },
//         }
//
//         // use mockedEventHandlerResolver in code that requires EventHandlerResolver
//         // and then make assertions.
//
//     }
type EventHandlerResolverMock struct {
	// ResolveFunc mocks the Resolve method.
	ResolveFunc func(event Event) ([]EventHandler, error)

	// calls tracks calls to the methods.
	calls struct {
		// Resolve holds details about calls to the Resolve method.
		Resolve []struct {
			// Event is the event argument value.
			Event Event
		}
	}
}

// Resolve calls ResolveFunc.
func (mock *EventHandlerResolverMock) Resolve(event Event) ([]EventHandler, error) {
	if mock.ResolveFunc == nil {
		panic("EventHandlerResolverMock.ResolveFunc: method is nil but EventHandlerResolver.Resolve was just called")
	}
	callInfo := struct {
		Event Event
	}{
		Event: event,
	}
	lockEventHandlerResolverMockResolve.Lock()
	mock.calls.Resolve = append(mock.calls.Resolve, callInfo)
	lockEventHandlerResolverMockResolve.Unlock()
	return mock.ResolveFunc(event)
}

// ResolveCalls gets all the calls that were made to Resolve.
// Check the length with:
//     len(mockedEventHandlerResolver.ResolveCalls())
func (mock *EventHandlerResolverMock) ResolveCalls() []struct {
	Event Event
} {
	var calls []struct {
		Event Event
	}
	lockEventHandlerResolverMockResolve.RLock()
	calls = mock.calls.Resolve
	lockEventHandlerResolverMockResolve.RUnlock()
	return calls
}
